/*
 * Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/ {
	host1x {
		vi@15c10000 {
			num-channels = <4>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					reg = <0>;
					liar0231_vi_in0: endpoint {
						port-index = <0>;
						bus-width = <4>;
						remote-endpoint = <&liar0231_csi_out0>;
					};
				};

				port@1 {
					reg = <1>;
					liar0231_vi_in1: endpoint {
						port-index = <2>;
						bus-width = <4>;
						remote-endpoint = <&liar0231_csi_out1>;
					};
				};

				port@2 {
					reg = <2>;
					liar0231_vi_in2: endpoint {
						port-index = <4>;
						bus-width = <4>;
						remote-endpoint = <&liar0231_csi_out2>;
					};
				};
				port@3 {
					reg = <3>;
					liar0231_vi_in3: endpoint {
						port-index = <5>;
						bus-width = <4>;
						remote-endpoint = <&liar0231_csi_out3>;
					};
				};
			};
		};

		nvcsi@15a00000 {
			num-channels = <4>;
			#address-cells = <1>;
			#size-cells = <0>;
			channel@0 {
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						liar0231_csi_in0: endpoint@0 {
							port-index = <0>;
							bus-width = <4>;
							remote-endpoint = <&liar0231_ar0231_out0>;
						};
					};
					port@1 {
						reg = <1>;
						liar0231_csi_out0: endpoint@1 {
							remote-endpoint = <&liar0231_vi_in0>;
						};
					};
				};
			};

			channel@1 {
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						liar0231_csi_in1: endpoint@2 {
							port-index = <2>;
							bus-width = <4>;
							remote-endpoint = <&liar0231_ar0231_out1>;
						};
					};
					port@1 {
						reg = <1>;
						liar0231_csi_out1: endpoint@3 {
							remote-endpoint = <&liar0231_vi_in1>;
						};
					};
				};
			};

			channel@2 {
				reg = <2>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						liar0231_csi_in2: endpoint@4 {
							port-index = <4>;
							bus-width = <4>;
							remote-endpoint = <&liar0231_ar0231_out2>;
						};
					};
					port@1 {
						reg = <1>;
						liar0231_csi_out2: endpoint@5 {
							remote-endpoint = <&liar0231_vi_in2>;
						};
					};
				};
			};

			channel@3 {
				reg = <3>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						liar0231_csi_in3: endpoint@6 {
							port-index = <6>;
							bus-width = <4>;
							remote-endpoint = <&liar0231_ar0231_out3>;
						};
					};
					port@1 {
						reg = <1>;
						liar0231_csi_out3: endpoint@7 {
							remote-endpoint = <&liar0231_vi_in3>;
						};
					};
				};
			};
		};
	};

	i2c@3180000 {
		tca9546@70 {
			i2c@0 {
				ar0231_a@10 {
					compatible = "nvidia,ar0231";
					/* I2C device address */
					reg = <0x10>;

					/* V4L2 device node location */
					devnode = "video0";

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					sensor_model = "ar0231";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					/*post_crop_frame_drop = "0";*/

					/* if true, delay gain setting by one frame to be in sync with exposure */
					delayed_gain = "true";

					/* has-eeprom; */
					/* fuse_id_start_addr = <91>; */
					mode0 {
						mclk_khz = "24000";
						num_lanes = "4";
						tegra_sinterface = "serial_a";
						phy_mode = "DPHY";
						discontinuous_clk = "yes";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1928";
						active_h = "1208";
						mode_type = "bayer";
						pixel_phase = "grbg";
						csi_pixel_bit_depth = "12";
						readout_orientation = "0";
						line_length = "1928";
						inherent_gain = "1";
						mclk_multiplier = "200";
						pix_clk_hz = "88032480";
						serdes_pix_clk_hz = "833333333";

						gain_factor = "1000000";
						min_gain_val = "1000000";
						max_gain_val = "48000000";
						step_gain_val = "1";
						default_gain = "1000000";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1";
						min_framerate = "30";
						max_framerate = "30";
						step_framerate = "1";
						default_framerate= "30";
						exposure_factor = "1000000";
						min_exp_time = "110";
						max_exp_time = "166577";
						step_exp_time = "1";
						default_exp_time = "6666";
						embedded_metadata_height = "0";
					};
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							liar0231_ar0231_out0: endpoint {
								port-index = <0>;
								bus-width = <4>;
								remote-endpoint = <&liar0231_csi_in0>;
							};
						};
					};
				};
			};

			i2c@1 {
				ar0231_c@10 {
					compatible = "nvidia,ar0231";
					/* I2C device address */
					reg = <0x10>;

					/* V4L2 device node location */
					devnode = "video1";

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					sensor_model = "ar0231";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					/*post_crop_frame_drop = "0";*/

					/* if true, delay gain setting by one frame to be in sync with exposure */
					delayed_gain = "true";

					/* has-eeprom; */
					/* fuse_id_start_addr = <91>; */
					mode0 {
						mclk_khz = "24000";
						num_lanes = "4";
						tegra_sinterface = "serial_c";
						phy_mode = "DPHY";
						discontinuous_clk = "yes";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1928";
						active_h = "1208";
						mode_type = "bayer";
						pixel_phase = "grbg";
						csi_pixel_bit_depth = "12";
						readout_orientation = "0";
						line_length = "1928";
						inherent_gain = "1";
						mclk_multiplier = "200";
						pix_clk_hz = "88032480";
						serdes_pix_clk_hz = "833333333";

						gain_factor = "1000000";
						min_gain_val = "1000000";
						max_gain_val = "48000000";
						step_gain_val = "1";
						default_gain = "1000000";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1";
						min_framerate = "30";
						max_framerate = "30";
						step_framerate = "1";
						default_framerate= "30";
						exposure_factor = "1000000";
						min_exp_time = "110";
						max_exp_time = "166577";
						step_exp_time = "1";
						default_exp_time = "6666";/* us */
						embedded_metadata_height = "0";
					};
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							liar0231_ar0231_out1: endpoint {
								port-index = <2>;
								bus-width = <4>;
								remote-endpoint = <&liar0231_csi_in1>;
							};
						};
					};
				};
			};

			i2c@2 {
				ar0231_e@10 {
					compatible = "nvidia,ar0231";
					/* I2C device address */
					reg = <0x10>;

					/* V4L2 device node location */
					devnode = "video2";

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					sensor_model = "ar0231";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					/*post_crop_frame_drop = "0";*/

					/* if true, delay gain setting by one frame to be in sync with exposure */
					delayed_gain = "true";

					/* has-eeprom; */
					/* fuse_id_start_addr = <91>; */
					mode0 {
						mclk_khz = "24000";
						num_lanes = "4";
						tegra_sinterface = "serial_e";
						phy_mode = "DPHY";
						discontinuous_clk = "yes";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1928";
						active_h = "1208";
						mode_type = "bayer";
						pixel_phase = "grbg";
						csi_pixel_bit_depth = "12";
						readout_orientation = "0";
						line_length = "1928";
						inherent_gain = "1";
						mclk_multiplier = "200";
						pix_clk_hz = "88032480";
						serdes_pix_clk_hz = "833333333";

						gain_factor = "1000000";
						min_gain_val = "1000000";
						max_gain_val = "48000000";
						step_gain_val = "1";
						default_gain = "1000000";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1";
						min_framerate = "30";
						max_framerate = "30";
						step_framerate = "1";
						default_framerate= "30";
						exposure_factor = "1000000";
						min_exp_time = "110";
						max_exp_time = "166577";
						step_exp_time = "1";
						default_exp_time = "6666";/* us */
						embedded_metadata_height = "0";
					};
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							liar0231_ar0231_out2: endpoint {
								port-index = <4>;
								bus-width = <4>;
								remote-endpoint = <&liar0231_csi_in2>;
							};
						};
					};
				};
			};

			i2c@3 {
				ar0231_g@10 {
					compatible = "nvidia,ar0231";
					/* I2C device address */
					reg = <0x10>;

					/* V4L2 device node location */
					devnode = "video3";

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					sensor_model = "ar0231";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					/*post_crop_frame_drop = "0";*/

					/* if true, delay gain setting by one frame to be in sync with exposure */
					delayed_gain = "true";

					/* has-eeprom; */
					/* fuse_id_start_addr = <91>; */
					mode0 {
						mclk_khz = "24000";
						num_lanes = "4";
						tegra_sinterface = "serial_g";
						phy_mode = "DPHY";
						discontinuous_clk = "yes";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1928";
						active_h = "1208";
						mode_type = "bayer";
						pixel_phase = "grbg";
						csi_pixel_bit_depth = "12";
						readout_orientation = "0";
						line_length = "1928";
						inherent_gain = "1";
						mclk_multiplier = "200";
						pix_clk_hz = "88032480";
						serdes_pix_clk_hz = "833333333";

						gain_factor = "1000000";
						min_gain_val = "1000000";
						max_gain_val = "48000000";
						step_gain_val = "1";
						default_gain = "1000000";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1";
						min_framerate = "30";
						max_framerate = "30";
						step_framerate = "1";
						default_framerate= "30";
						exposure_factor = "1000000";
						min_exp_time = "110";
						max_exp_time = "166577";
						step_exp_time = "1";
						default_exp_time = "6666";/* us */
						embedded_metadata_height = "0";
					};
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							liar0231_ar0231_out3: endpoint {
								port-index = <4>;
								bus-width = <4>;
								remote-endpoint = <&liar0231_csi_in3>;
							};
						};
					};
				};
			};
		};
	};
	lens_ar0231@A6V26 {
		min_focus_distance = "0.0";
		hyper_focal = "0.0";
		focal_length = "5.00";
		f_number = "2.0";
		aperture = "2.2";
	};
};

/ {
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <16>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <750000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vender.
		 */
		modules {
			module0 {
				badge = "ar0231_bottom_A6V26";
				position = "bottom";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ar0231 30-0010";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9546@70/i2c@0/ar0231_a@10";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0231@A6V26/";
				};
			};

			module1 {
				badge = "ar0231_centerleft_A6V26";
				position = "centerleft";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ar0231 31-0010";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9546@70/i2c@1/ar0231_c@10";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0231@A6V26/";
				};
			};

			module2 {
				badge = "ar0231_centerright_A6V26";
				position = "centerright";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ar0231 32-0010";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9546@70/i2c@2/ar0231_e@10";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0231@A6V26/";
				};
			};

			module3 {
				badge = "ar0231_topleft_A6V26";
				position = "topleft";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ar0231 33-0010";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9546@70/i2c@3/ar0231_g@10";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0231@A6V26/";
				};
			};

		};
	};
};
